import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
import os
import logging
from datetime import datetime
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramAssistant:
    def __init__(self, data_file='data.txt'):
        """Inicializar el asistente virtual para Telegram"""
        self.model = None
        self.data_file = data_file
        self.initialize_model()
        
    def initialize_model(self):
        """Inicializar y entrenar el modelo"""
        data, labels = self.load_data()
        self.train_model(data, labels)

    def load_data(self):
        """Cargar datos de entrenamiento con validaci√≥n"""
        if not os.path.exists(self.data_file):
            return self.get_default_data()
        
        data = []
        labels = []
        
        try:
            with open(self.data_file, 'r', encoding='utf-8') as file:
                for line_num, line in enumerate(file, 1):
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                    
                    parts = line.split(',')
                    if len(parts) >= 2:
                        command = parts[0].strip().lower()
                        category = parts[1].strip().lower()
                        if command and category:
                            data.append(command)
                            labels.append(category)
            
            if not data:
                return self.get_default_data()
                
            return data, labels
            
        except Exception as e:
            return self.get_default_data()

    def get_default_data(self):
        """Datos de entrenamiento por defecto"""
        data = [
            # Saludos (10 ejemplos)
            "hola", "buenos d√≠as", "buenas tardes", "hey", "saludos", 
            "buenas noches", "qu√© tal", "hola asistente", "buenos d√≠as asistente", "hi",
            
            # Despedidas (10 ejemplos)
            "adi√≥s", "hasta luego", "nos vemos", "chau", "bye", 
            "salir", "terminar", "cerrar", "hasta pronto", "me voy",
            
            # Comandos del hogar (16 ejemplos)
            "encender luz", "enciende las luces", "prender luces", "luz on",
            "encender la luz", "enciende luz", "prender la luz", "iluminar",
            "apagar luz", "apaga las luces", "apagar luces", "luz off",
            "apagar la luz", "apaga luz", "apagar todas las luces", "oscurecer",
            
            # Consultas sobre estado (8 ejemplos)
            "c√≥mo est√°s", "qu√© tal", "c√≥mo te encuentras", "todo bien",
            "como estas", "que tal", "c√≥mo va todo", "todo ok",
            
            # Agradecimientos (8 ejemplos)
            "gracias", "muchas gracias", "te agradezco", "thank you",
            "muy bien", "perfecto", "excelente", "genial",
            
            # Informaci√≥n (8 ejemplos)
            "qu√© hora es", "dime la hora", "hora actual", "qu√© d√≠a es",
            "ayuda", "help", "qu√© puedes hacer", "comandos disponibles",
            
            # Clima (6 ejemplos)
            "c√≥mo est√° el clima", "qu√© tiempo hace", "va a llover",
            "temperatura", "clima hoy", "pron√≥stico del tiempo"
        ]
        
        labels = [
            # Saludos (10 etiquetas)
            "saludar", "saludar", "saludar", "saludar", "saludar",
            "saludar", "saludar", "saludar", "saludar", "saludar",
            
            # Despedidas (10 etiquetas)
            "despedir", "despedir", "despedir", "despedir", "despedir",
            "despedir", "despedir", "despedir", "despedir", "despedir",
            
            # Comandos del hogar (16 etiquetas)
            "hogar", "hogar", "hogar", "hogar", "hogar", "hogar", "hogar", "hogar",
            "hogar", "hogar", "hogar", "hogar", "hogar", "hogar", "hogar", "hogar",
            
            # Consultas sobre estado (8 etiquetas)
            "consulta", "consulta", "consulta", "consulta",
            "consulta", "consulta", "consulta", "consulta",
            
            # Agradecimientos (8 etiquetas)
            "agradecimiento", "agradecimiento", "agradecimiento", "agradecimiento",
            "agradecimiento", "agradecimiento", "agradecimiento", "agradecimiento",
            
            # Informaci√≥n (8 etiquetas)
            "informacion", "informacion", "informacion", "informacion",
            "informacion", "informacion", "informacion", "informacion",
            
            # Clima (6 etiquetas)
            "clima", "clima", "clima", "clima", "clima", "clima"
        ]
        
        return data, labels

    def train_model(self, data, labels):
        """Entrenar modelo con validaci√≥n"""
        try:
            if not data or not labels or len(data) != len(labels) or len(set(labels)) < 2:
                return False
            
            self.model = make_pipeline(
                CountVectorizer(lowercase=True, stop_words=None, ngram_range=(1, 2)),
                MultinomialNB(alpha=1.0)
            )
            
            self.model.fit(data, labels)
            return True
            
        except Exception as e:
            logger.error(f"Error entrenando modelo: {e}")
            return False

    def predict_command(self, command):
        """Predecir categor√≠a del comando"""
        if not self.model:
            return "desconocido"
        
        try:
            prediction = self.model.predict([command.lower()])[0]
            probabilities = self.model.predict_proba([command.lower()])[0]
            max_prob = max(probabilities)
            
            if max_prob < 0.3:
                return "desconocido"
            
            return prediction
            
        except Exception as e:
            logger.error(f"Error en predicci√≥n: {e}")
            return "desconocido"

    def generate_response(self, command, category):
        """Generar respuesta seg√∫n la categor√≠a predicha"""
        try:
            if category == 'hogar':
                return self.handle_home_commands(command)
            elif category == 'saludar':
                responses = [
                    "¬°Hola! ü§ñ Soy tu asistente virtual, ¬øc√≥mo puedo ayudarte?",
                    "¬°Buenos d√≠as! ‚òÄÔ∏è Estoy aqu√≠ para asistirte.",
                    "¬°Hola! üëã ¬øEn qu√© puedo ayudarte?",
                    "¬°Saludos! üôã‚Äç‚ôÇÔ∏è ¬øQu√© necesitas?",
                    "¬°Hola! üòä ¬øC√≥mo puedo ayudarte hoy?"
                ]
                return np.random.choice(responses)
            elif category == 'despedir':
                responses = [
                    "¬°Adi√≥s! üëã Hasta luego.",
                    "¬°Nos vemos! üòä Que tengas un buen d√≠a.",
                    "¬°Hasta pronto! üôÇ Fue un placer ayudarte.",
                    "¬°Chau! üëã Vuelve cuando necesites ayuda.",
                    "¬°Hasta la vista! üòé Que todo vaya bien."
                ]
                return np.random.choice(responses)
            elif category == 'consulta':
                responses = [
                    "Estoy muy bien, gracias por preguntar. üòä ¬øY t√∫ c√≥mo est√°s?",
                    "Todo perfecto por aqu√≠. ‚úÖ ¬øC√≥mo puedo ayudarte?",
                    "Muy bien, listo para ayudarte. üöÄ ¬øQu√© necesitas?",
                    "Excelente, funcionando al 100%. üíØ ¬øEn qu√© te puedo asistir?",
                    "¬°Genial! üéâ Aqu√≠ estoy para lo que necesites."
                ]
                return np.random.choice(responses)
            elif category == 'agradecimiento':
                responses = [
                    "¬°De nada! üòä Siempre es un placer ayudar.",
                    "¬°No hay de qu√©! üëç Para eso estoy aqu√≠.",
                    "¬°Con gusto! üôÇ ¬øNecesitas algo m√°s?",
                    "¬°Un placer! üòÑ Estoy aqu√≠ cuando me necesites.",
                    "¬°Perfecto! üéØ Me alegra poder ayudarte."
                ]
                return np.random.choice(responses)
            elif category == 'informacion':
                return self.handle_info_commands(command)
            elif category == 'clima':
                responses = [
                    "Lo siento, no tengo acceso a datos meteorol√≥gicos en tiempo real. üå§Ô∏è Te recomiendo consultar una aplicaci√≥n del clima.",
                    "Para informaci√≥n del clima actualizada, te sugiero revisar el pron√≥stico en tu aplicaci√≥n favorita. üì±",
                    "No puedo acceder a datos del clima en este momento. ‚õÖ ¬øHay algo m√°s en lo que pueda ayudarte?"
                ]
                return np.random.choice(responses)
            else:
                suggestions = [
                    "No entiendo esa orden. ü§î Prueba con comandos como: 'hola', 'encender luces', 'ayuda', 'adi√≥s'.",
                    "Comando no reconocido. ‚ùì Algunos ejemplos: 'c√≥mo est√°s', 'apagar luz', 'qu√© puedes hacer'.",
                    "No comprendo. üòÖ Intenta con: 'buenos d√≠as', 'encender tv', 'gracias', 'salir'."
                ]
                return np.random.choice(suggestions)
                
        except Exception as e:
            logger.error(f"Error generando respuesta: {e}")
            return "Disculpa, hubo un error procesando tu solicitud. üòî"

    def handle_home_commands(self, command):
        """Manejar comandos del hogar"""
        if any(word in command for word in ["encender", "enciende", "prender", "on"]):
            if any(word in command for word in ["luz", "luces", "iluminaci√≥n"]):
                return "üí° Encendiendo las luces del hogar."
            elif any(word in command for word in ["tv", "televisi√≥n", "televisor"]):
                return "üì∫ Encendiendo la televisi√≥n."
            else:
                return "üí° Encendiendo dispositivo..."
                
        elif any(word in command for word in ["apagar", "apaga", "off"]):
            if any(word in command for word in ["luz", "luces", "iluminaci√≥n"]):
                return "üí° Apagando las luces del hogar."
            elif any(word in command for word in ["tv", "televisi√≥n", "televisor"]):
                return "üì∫ Apagando la televisi√≥n."
            else:
                return "üí° Apagando dispositivo..."
        else:
            return "Comando de hogar no reconocido. üè† Intenta con 'encender/apagar luces' o 'encender/apagar tv'."

    def handle_info_commands(self, command):
        """Manejar comandos de informaci√≥n"""
        if any(word in command for word in ["hora", "tiempo"]):
            now = datetime.now()
            time_str = now.strftime("%H:%M:%S")
            date_str = now.strftime("%d/%m/%Y")
            return f"üïê Son las {time_str} del {date_str}"
        elif any(word in command for word in ["ayuda", "help", "comandos", "qu√© puedes hacer"]):
            help_text = """üìã *Comandos disponibles:*

üôã‚Äç‚ôÇÔ∏è *Saludos:* 'hola', 'buenos d√≠as', 'buenas tardes'
üëã *Despedidas:* 'adi√≥s', 'hasta luego', 'salir'
üè† *Hogar:* 'encender/apagar luces', 'encender/apagar tv'
üí¨ *Consultas:* 'c√≥mo est√°s', 'qu√© tal'
‚ÑπÔ∏è *Informaci√≥n:* 'qu√© hora es', 'ayuda'
üôè *Agradecimientos:* 'gracias', 'perfecto'

¬°Prueba cualquiera de estos comandos! üöÄ"""
            return help_text
        else:
            return "‚ÑπÔ∏è Informaci√≥n no disponible. Prueba con 'ayuda' para ver comandos disponibles."

# Instancia global del asistente
assistant = TelegramAssistant()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start"""
    welcome_msg = """ü§ñ *¬°Bienvenido al Asistente Virtual!*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Soy tu asistente inteligente en Telegram. Puedes escribirme comandos y yo los procesar√© para ayudarte.

üí° *Ejemplos:* 'hola', 'encender luces', 'c√≥mo est√°s', 'ayuda', 'adi√≥s'

¬°Empecemos a chatear! üöÄ

Escribe /help para ver todos los comandos disponibles."""
    
    await update.message.reply_text(welcome_msg, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /help"""
    help_text = """üÜò *Ayuda del Asistente Virtual*

üìã *Comandos disponibles:*

üôã‚Äç‚ôÇÔ∏è *Saludos:* 'hola', 'buenos d√≠as', 'buenas tardes'
üëã *Despedidas:* 'adi√≥s', 'hasta luego', 'salir'  
üè† *Hogar:* 'encender/apagar luces', 'encender/apagar tv'
üí¨ *Consultas:* 'c√≥mo est√°s', 'qu√© tal'
‚ÑπÔ∏è *Informaci√≥n:* 'qu√© hora es', 'ayuda'
üôè *Agradecimientos:* 'gracias', 'perfecto'
üå§Ô∏è *Clima:* 'c√≥mo est√° el clima', 'qu√© tiempo hace'

*Comandos especiales:*
/start - Mensaje de bienvenida
/help - Esta ayuda
/status - Estado del bot

¬°Solo escribe tu mensaje y yo te entender√©! üòä"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /status"""
    status_msg = """üîß *Estado del Sistema*

‚úÖ Bot activo y funcionando
ü§ñ Modelo de IA: Entrenado y listo
üìä Sistema de predicci√≥n: Operativo
üíæ Base de datos: Cargada

üéØ Listo para procesar tus comandos!"""
    
    await update.message.reply_text(status_msg, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manejar mensajes de texto"""
    try:
        user_message = update.message.text
        user_name = update.effective_user.first_name
        
        logger.info(f"Mensaje de {user_name}: {user_message}")
        
        # Predecir categor√≠a y generar respuesta
        category = assistant.predict_command(user_message)
        response = assistant.generate_response(user_message, category)
        
        # Enviar respuesta
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"Error manejando mensaje: {e}")
        await update.message.reply_text("üòî Lo siento, hubo un error procesando tu mensaje. Intenta de nuevo.")

def main():
    """Funci√≥n principal para ejecutar el bot"""
    # Token del bot de Telegram
    TOKEN = "8026091378:AAFhu6sdIXJ7UHI0xoF1mAdCpZXq_aSU0t0"
    
    # Crear aplicaci√≥n
    application = Application.builder().token(TOKEN).build()
    
    # Agregar manejadores
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Iniciar bot
    print("üöÄ Iniciando bot de Telegram...")
    print("‚úÖ Bot activo. Presiona Ctrl+C para detener.")
    
    # Ejecutar bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()